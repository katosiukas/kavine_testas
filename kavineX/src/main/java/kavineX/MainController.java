package kavineX;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
// import org.springframework.context.support.AbstractApplicationContext;
// import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.util.Optional;
import duomenys.web.kavine.*;
import kavineX.Uzsakymai;
import kavineX.UzsakymaiRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/restfull") // URL's pridedam /restfull 
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UzsakymaiRepository UzsakymaiRepository;
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data	
	private ProduktaiRepository ProduktaiRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String pav
			, @RequestParam Integer trukme_kaitinimo
			, @RequestParam Integer trukme_ruosimo) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Uzsakymai n = new Uzsakymai();
		n.setPav(pav);
		n.setTrukme_kaitinimo(trukme_kaitinimo);
		n.setTrukme_ruosimo(trukme_ruosimo);
		n.setBusena("uzsakytas");
		UzsakymaiRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/changestatus") 
	public @ResponseBody String keistiBusena (@RequestParam String busena
			, @RequestParam Integer id 
			) {
				
		Optional <Uzsakymai> found = UzsakymaiRepository.findById( id );
		
		String res = "Not done";
		
		if ( found.isPresent() ) {
			
			   Uzsakymai n = found.get();
			   n.setId(id);
			   n.setBusena(busena);	
			 
			   if (busena.equals ("anuliuotas")) {
				   UzsakymaiRepository.deleteById(id);
			   } else {
			   UzsakymaiRepository.save(n);	
			   res = "Saved"; 
			   			}
				}		
	
		return res;
	}	
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Uzsakymai> getAllUsers1() {
		
		return UzsakymaiRepository.findAll();
	}
	
	@GetMapping(path="/produktai")
	public @ResponseBody Iterable<Produktai> getAllProduktai() {
		
		return ProduktaiRepository.findAll();
	}
	
	@GetMapping(path="/isnesioti")
	public @ResponseBody Iterable<Patiekalas> getAllUzsakymai() {
		
		ApplicationContext context = new ClassPathXmlApplicationContext( "file:src/beans.xml" );
		
		UzsakymaiOrg uzsakymai = (UzsakymaiOrg) context.getBean( "uzsakymai" );
		uzsakymai.nuskaityti(); 
		uzsakymai.ruostiPatiekalus();
		uzsakymai.patiekti();
	//	uzsakymai.isnesioti();
				
		return uzsakymai.isnesiotix();
	
	}
}