package kavineX;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.util.Optional;
import duomenys.web.kavine.*;
import kavineX.Uzsakymai;
import kavineX.UzsakymaiRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/restfull") // URL's pridedam /restfull 
public class MainController {
						// This means to get the bean called userRepository
	@Autowired         	// Which is auto-generated by Spring, we will use it to handle the data
	private UzsakymaiRepository UzsakymaiRepository;
	
	@Autowired
	private ProduktaiRepository ProduktaiRepository;
	
	@Autowired
	private PatiekalaiRepository PatiekalaiRepository;
	
	@Autowired
	private Patiekalu_produktaiRepository Patiekalu_produktaiRepository;
	
	// Cia uzsakymai
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String pav
			, @RequestParam Integer trukme_kaitinimo
			, @RequestParam Integer trukme_ruosimo) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Uzsakymai n = new Uzsakymai();
		n.setPav(pav);
		n.setTrukme_kaitinimo(trukme_kaitinimo);
		n.setTrukme_ruosimo(trukme_ruosimo);
		n.setBusena("uzsakytas");
		UzsakymaiRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/changestatus") 
	public @ResponseBody String keistiBusena (@RequestParam String busena
			, @RequestParam Integer id 
			) {
				
		Optional <Uzsakymai> found = UzsakymaiRepository.findById( id );
		
		String res = "Not done";
		
		if ( found.isPresent() ) {
			
			   Uzsakymai n = found.get();
			   n.setId(id);
			   n.setBusena(busena);	
			 
			   if (busena.equals ("anuliuotas")) {
				   UzsakymaiRepository.deleteById(id);
			   } else {
			   UzsakymaiRepository.save(n);	
			   res = "Saved"; 
			   			}
				}		
	
		return res;
	}
	
	// Cia produktai
	@GetMapping(path="/addp") // Map ONLY GET Requests
	public @ResponseBody String addNewProd (@RequestParam String pav
			, @RequestParam String mat_vnt
			, @RequestParam Integer mat_kiek
			, @RequestParam Float kaina
			, @RequestParam Float kiekis_sand) {
				
		Produktai n = new Produktai();
		n.setPav(pav);
		n.setMat_vnt(mat_vnt);
		n.setMat_kiek(mat_kiek);
		n.setKaina(kaina);
		n.setKiekis_sand(kiekis_sand);
		n.setLikutis("yra");
		ProduktaiRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/editp") 
	public @ResponseBody String keistiBusenap (@RequestParam Integer id
			, @RequestParam String pav
			, @RequestParam String mat_vnt
			, @RequestParam Integer mat_kiek
			, @RequestParam Float kaina
			, @RequestParam Float kiekis_sand
			
			) {
				
		Optional <Produktai> found = ProduktaiRepository.findById( id );
		
		String res = "Not done";
		
		if ( found.isPresent() ) {
			
			   Produktai n = found.get();
			   n.setId(id);
			   n.setPav(pav);
			   n.setMat_vnt(mat_vnt);
			   n.setMat_kiek(mat_kiek);
			   n.setKaina(kaina);
			   n.setKiekis_sand(kiekis_sand);
				
			   ProduktaiRepository.save(n);	
			   res = "Saved"; 
			   			}
		return res;
	}	
	
	@GetMapping(path="/delp") 
	public @ResponseBody String trintiProdukta (@RequestParam String likutis
			, @RequestParam Integer id 
			) {
				
		Optional <Produktai> found = ProduktaiRepository.findById( id );
		
		String res = "Not done";
		
		if ( found.isPresent() ) {
			
			   Produktai n = found.get();
			   n.setId(id);
			   n.setLikutis(likutis);	
			 
			   if (likutis.equals ("yra")) {
				   ProduktaiRepository.deleteById(id);
			   } else {
			   ProduktaiRepository.save(n);	
			   res = "Saved"; 
			   			}
				}		
	
		return res;
	}
	
	//cia patiekalai
	@GetMapping(path="/add_pat") 
	public @ResponseBody String addNewPat (@RequestParam String pav
			, @RequestParam Integer trukme_kaitinimo
			, @RequestParam Integer trukme_ruosimo
			, @RequestParam Double kaina) {
				
		Patiekalai n = new Patiekalai();
		n.setPav(pav);
		n.setTrukme_kaitinimo(trukme_kaitinimo);
		n.setTrukme_ruosimo(trukme_ruosimo);
		n.setKaina(kaina);
		PatiekalaiRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/del_pat") 
	public @ResponseBody String sudetis (@RequestParam Integer id ) {
				
		Optional <Patiekalai> found = PatiekalaiRepository.findById( id );
		
		String res = "Not done";
		Patiekalai n = found.get();
		n.setId(id);
		PatiekalaiRepository.deleteById(id);
		res = "Deleted";
		
		return res;
	}
	
	@GetMapping(path="/adding") 
	public @ResponseBody String addNewIng (@RequestParam Integer patiekalo_id
		, @RequestParam Integer produkto_id
		, @RequestParam Double kiekis) {
				
		Patiekalu_produktai n = new Patiekalu_produktai();
		n.setPatiekalai_id(patiekalo_id);
		n.setProduktai_id(produkto_id);
		n.setKiekis(kiekis);
		Patiekalu_produktaiRepository.save(n);
		return "Saved";
	}
		
	@GetMapping(path="/deling")
	public @ResponseBody String delIng (@RequestParam Integer id) {
		
		Optional <Patiekalu_produktai> found = Patiekalu_produktaiRepository.findById( id );
		
		String res = "Not done";
		Patiekalu_produktai n = found.get();
		n.setId(id);
		Patiekalu_produktaiRepository.deleteById(id);
		return "Deleted";
	}
	
	@GetMapping(path="/editing")
	public @ResponseBody String editIng (@RequestParam Integer id, @RequestParam Double kiekis) {
		
		Optional <Patiekalu_produktai> found = Patiekalu_produktaiRepository.findById( id );
		
		String res = "Not done";
		Patiekalu_produktai n = found.get();
		n.setId(id);
		n.setKiekis(kiekis);
		Patiekalu_produktaiRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Uzsakymai> getAllUsers() {
		
		return UzsakymaiRepository.findAll();
	}
	
	@GetMapping(path="/produktai")
	public @ResponseBody Iterable<Produktai> getAllProduktai() {
		
		return ProduktaiRepository.findAll();
	}
		
	@GetMapping(path="/all_pat")
	public @ResponseBody Iterable<Patiekalai> getAllPatiekalai() {
		
		return PatiekalaiRepository.findAll();
	}
	
	@GetMapping(path="/patiekalai")
	public @ResponseBody Optional Patiekalai(@RequestParam Integer patiekalo_id) {
		
		return PatiekalaiRepository.findById (patiekalo_id);
	}
			
	@GetMapping(path="/isnesioti")
	public @ResponseBody Iterable<Patiekalas> getAllUzsakymai() {
		
		ApplicationContext context = new ClassPathXmlApplicationContext( "file:src/beans.xml" );
		
		UzsakymaiOrg uzsakymai = (UzsakymaiOrg) context.getBean( "uzsakymai" );
		uzsakymai.nuskaityti(); 
		uzsakymai.ruostiPatiekalus();
		uzsakymai.patiekti();
	//	uzsakymai.isnesioti();
				
		return uzsakymai.isnesiotix();
	
	}
}